version: "3.8"

networks:
  ff3: {}
  proxy:
    name: ${PROXY_NETWORK_NAME:-proxy}
    external: true

volumes:
  db_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${FF3_STACK_DIR}/db
  db_backup:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${FF3_STACK_DIR}/backup
  uploads:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${FF3_STACK_DIR}/uploads

secrets:
  ff3_db_root_password:
    name: ${FF3_MARIADB_ROOT_PASSWORD_NAME:-ff3_db_root_password}
    external: true
  ff3_db_user_password:
    name: ${FF3_MARIADB_USER_PASSWORD_NAME:-ff3_db_user_password}
    external: true
  ff3_encryption_key:
    name: ${FF3_ENCRYPTION_KEY_NAME:-ff3_encryption_key}
    external: true
  ff3_crontab_token:
    name: ${FF3_CRONTAB_TOKEN_NAME:-ff3_crontab_token}
    external: true
  ff3_gmail_password:
    name: ${FF3_GMAIL_PASSWORD_NAME:-ff3_gmail_password}
    external: true

# backups are too large for configuration now    
# configs:
#   last_backup:
#     name: ${FF3_LAST_BACKUP_FILE:-ff3_last_backup}
#     external: true

services:
  db:
    image: mariadb:lts
    environment:
      MARIADB_ROOT_PASSWORD_FILE: /run/secrets/ff3_db_root_password
      MARIADB_DATABASE: ${FF3_DATABASE_NAME:-ff3}
      MARIADB_USER: ${FF3_DATABASE_USER:-ff3_db_user}
      MARIADB_PASSWORD_FILE: /run/secrets/ff3_db_user_password
    # configs:
    #   - source: last_backup
    #     target: /docker-entrypoint-initdb.d/01-initdb.sql
    #     mode: 0644
    volumes:
      - db_data:/var/lib/mysql
      - db_backup:/backup
    secrets:
      - ff3_db_root_password
      - ff3_db_user_password
    networks:
      - ff3
    healthcheck:
      test: ["CMD-SHELL", "mariadb-admin ping -h localhost -u root -p$$(cat /run/secrets/ff3_db_root_password) | grep -q 'is alive'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s  # Tiempo extra para inicializaci√≥n de la BD      

  app:
    image: fireflyiii/core:version-6.2.9
    volumes:
      - uploads:/var/www/html/storage/upload
    environment:
      DB_CONNECTION: mysql
      DB_HOST: db
      DB_PORT: 3306
      DB_DATABASE: ${FF3_DATABASE_NAME:-ff3}
      DB_USERNAME: ${FF3_DATABASE_USER:-ff3_db_user}
      DB_PASSWORD_FILE: /run/secrets/ff3_db_user_password
      APP_URL: https://${FF3_FQDN}
      TRUSTED_PROXIES: "**"
      SITE_OWNER: ${FF3_SITE_OWNER}
      APP_KEY_FILE: /run/secrets/ff3_encryption_key
      STATIC_CRON_TOKEN_FILE: /run/secrets/ff3_crontab_token
      MAIL_MAILER: smtp
      MAIL_HOST: smtp.gmail.com
      MAIL_PORT: 587
      MAIL_FROM: ${FF3_SITE_OWNER}
      MAIL_USERNAME: ${FF3_GMAIL_USERNAME}
      MAIL_PASSWORD_FILE: /run/secrets/ff3_gmail_password
      MAIL_ENCRYPTION: tls
      ENABLE_EXTERNAL_RATES: "true"
    depends_on:
      - db
    networks:
      - proxy
      - ff3
    secrets:
      - ff3_encryption_key
      - ff3_db_user_password
      - ff3_crontab_token
      - ff3_gmail_password
    healthcheck:
      test: ["CMD-SHELL", "curl -sL http://localhost:8080/healthcheck | grep -q OK"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 20s
    labels:
      - traefik.enable=true
      - traefik.http.routers.ff3.rule=Host(`${FF3_FQDN}`)
      - traefik.http.routers.ff3.tls=true
      - traefik.http.routers.ff3.tls.certresolver=cloudflare
      - traefik.http.services.ff3.loadbalancer.server.port=8080

  cron:
    #
    # To make this work, set STATIC_CRON_TOKEN in your .env file or as an environment variable and replace REPLACEME below
    # The STATIC_CRON_TOKEN must be *exactly* 32 characters long
    #
    image: alpine
    command: sh -c "crontab -l | { cat; echo '0 * * * * wget -qO- http://app:8080/api/v1/cron/$$(cat /run/secrets/ff3_crontab_token)'; } | crontab - && crond -f -L /dev/stdout"
    environment:
      TOKEN_FILE: /run/secrets/ff3_crontab_token
    networks:
      - ff3
    secrets:
      - ff3_crontab_token
    depends_on:
      - app
